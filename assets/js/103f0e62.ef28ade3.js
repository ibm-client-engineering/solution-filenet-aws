"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2],{8341:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>r,frontMatter:()=>t,metadata:()=>i,toc:()=>c});var s=a(5893),l=a(1151);const t={id:"solution-deploy-openldap",sidebar_position:1,title:"OpenLDAP"},o="Deploy OpenLDAP",i={id:"Create/Deploy/solution-deploy-openldap",title:"OpenLDAP",description:"Let's create a namespace for openldap (This is optional. For the rest of this, we'll just stick openldap into our filenet namespace)",source:"@site/docs/3-Create/Deploy/openldap.mdx",sourceDirName:"3-Create/Deploy",slug:"/Create/Deploy/solution-deploy-openldap",permalink:"/Create/Deploy/solution-deploy-openldap",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-client-engineering/solution-filenet-aws/tree/main/packages/create-docusaurus/templates/shared/docs/3-Create/Deploy/openldap.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"solution-deploy-openldap",sidebar_position:1,title:"OpenLDAP"},sidebar:"tutorialSidebar",previous:{title:"Deploy",permalink:"/category/deploy"},next:{title:"Postgres",permalink:"/Create/Deploy/solution-deploy-postgres"}},d={},c=[];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"deploy-openldap",children:"Deploy OpenLDAP"}),"\n",(0,s.jsx)(n.p,{children:"Let's create a namespace for openldap (This is optional. For the rest of this, we'll just stick openldap into our filenet namespace)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl create namespace filenet-openldap\nkubectl label namespace filenet-openldap app=filenet-openldap\n"})}),"\n",(0,s.jsx)(n.p,{children:"Set our context to the new namespace (only if you created a separate namespace to run openldap in)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl config set-context --current --namespace=filenet-openldap\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's create some configmaps for the ldap service"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"openldap-schemas-configmap.yaml"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:"showLineNumbers",children:"kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: openldap-customschema\n  labels:\n    app: filenet-openldap\ndata:\n  custom.ldif: |-\n    dn: cn=sds,cn=schema,cn=config\n    objectClass: olcSchemaConfig\n    cn: sds\n    olcAttributeTypes: {0}( 1.3.6.1.4.1.42.2.27.4.1.6 NAME 'ibm-entryuuid' DESC \n      'Uniquely identifies a directory entry throughout its life.' EQUALITY caseIgnoreMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE )\n    olcObjectClasses: {0}( 1.3.6.1.4.1.42.2.27.4.2.1 NAME 'sds' DESC 'sds' SUP top AUXILIARY MUST ( cn $ ibm-entryuuid ) )\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl apply -f openldap-schemas-configmap.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"openldap-ldif-configmap.yaml"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: openldap-customldif\n  labels:\n    app: filenet-openldap\ndata:\n  01-default-users.ldif: |-\n    # cp.internal\n    dn: dc=filenet,dc=internal\n    objectClass: top\n    objectClass: dcObject\n    objectClass: organization\n    o: filenet.internal\n    dc: filenet\n\n    # Units\n    dn: ou=Users,dc=filenet,dc=internal\n    objectClass: organizationalUnit\n    ou: Users\n\n    dn: ou=Groups,dc=filenet,dc=internal\n    objectClass: organizationalUnit\n    ou: Groups\n\n    # Users\n    dn: uid=cpadmin,ou=Users,dc=filenet,dc=internal\n    objectClass: inetOrgPerson\n    objectClass: top\n    objectClass: sds\n    cn: cpadmin\n    sn: cpadmin\n    uid: cpadmin\n    mail: cpadmin@cp.internal\n    userpassword: Password\n    employeeType: admin\n    ibm-entryuuid: e6c41859-ced3-4772-bfa3-6ebbc58ec78a\n\n    dn: uid=cpuser,ou=Users,dc=filenet,dc=internal\n    objectClass: inetOrgPerson\n    objectClass: top\n    objectClass: sds\n    cn: cpuser\n    sn: cpuser\n    uid: cpuser\n    mail: cpuser@cp.internal\n    userpassword: Password\n    ibm-entryuuid: 30183bb0-1012-4d23-8ae2-f94816b91a75\n\n    # Groups\n    dn: cn=cpadmins,ou=Groups,dc=filenet,dc=internal\n    objectClass: groupOfNames\n    objectClass: top\n    objectClass: sds\n    cn: cpadmins\n    ibm-entryuuid: 4196cb9e-1ed7-4c02-bb0d-792cb7bfa768\n    member: uid=cpadmin,ou=Users,dc=filenet,dc=internal\n\n    dn: cn=cpusers,ou=Groups,dc=filenet,dc=internal\n    objectClass: groupOfNames\n    objectClass: top\n    objectClass: sds\n    cn: cpusers\n    ibm-entryuuid: fc4ded27-8c6a-4a8c-ad9e-7be65369758c\n    member: uid=cpadmin,ou=Users,dc=filenet,dc=internal\n    member: uid=cpuser,ou=Users,dc=filenet,dc=internal\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl apply -f openldap-ldif-configmap.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create an env configmap"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"openldap-env-configmap.yaml"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: openldap-env\n  labels:\n    app: filenet-openldap\ndata:\n  BITNAMI_DEBUG: 'true'\n  LDAP_ORGANISATION: filnet.internal\n  LDAP_ROOT: 'dc=filenet,dc=internal'\n  LDAP_DOMAIN: filenet.internal\n  LDAP_CUSTOM_LDIF_DIR: /ldifs\n  LDAP_ADMIN_USERNAME: admin\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl apply -f openldap-env-configmap.yaml\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And finally create a secret for the LDAP_ADMIN_PASSWORD. In this example we are setting the default admin password to ",(0,s.jsx)(n.code,{children:"p@ssw0rd"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"openldap-admin-secret.yaml"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kind: Secret\napiVersion: v1\nmetadata:\n  name: openldap\n  labels:\n    app: filenet-openldap\nstringData:\n  LDAP_ADMIN_PASSWORD: p@ssw0rd\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl apply -f openldap-admin-secret.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"ldap_secrets.yaml"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:"showLineNumbers",children:'kind: Secret\napiVersion: v1\nmetadata:\n  name: ldap-bind-secret\n  namespace: filenet\n  labels:\n    app: filenet-openldap\nstringData:\n  ldapUsername: "cn=admin,dc=filenet,dc=internal"\n  ldapPassword: p@ssw0rd\n  externalLdapUsername: "cn=admin,dc=filenet,dc=internal"\n  externalLdapPassword: p@ssw0rd\n'})}),"\n",(0,s.jsx)(n.p,{children:"Apply it to the cluster"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"kubectl apply -f ldap_secrets.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now let's create a deployment."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"openldap-deploy.yaml"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"kind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: openldap-deploy\n  labels:\n    app: filenet-openldap\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: filenet-openldap\n  template:\n    metadata:\n      labels:\n        app: filenet-openldap\n    spec:\n      containers:\n        - name: openldap\n          resources:\n            requests:\n              cpu: 100m\n              memory: 256Mi\n            limits:\n              cpu: 500m\n              memory: 512Mi\n          startupProbe:\n            tcpSocket:\n              port: ldap-port\n            timeoutSeconds: 1\n            periodSeconds: 10\n            successThreshold: 1\n            failureThreshold: 30\n          readinessProbe:\n            tcpSocket:\n              port: ldap-port\n            initialDelaySeconds: 60\n            timeoutSeconds: 1\n            periodSeconds: 10\n            successThreshold: 1\n            failureThreshold: 10\n          livenessProbe:\n            tcpSocket:\n              port: ldap-port\n            initialDelaySeconds: 60\n            timeoutSeconds: 1\n            periodSeconds: 10\n            successThreshold: 1\n            failureThreshold: 10\n          terminationMessagePath: /dev/termination-log\n          ports:\n            - name: ldap-port\n              containerPort: 1389\n              protocol: TCP\n          image: 'bitnami/openldap:latest'\n          imagePullPolicy: Always\n          securityContext:\n            capabilities:\n              drop:\n                - ALL\n            runAsNonRoot: true\n            allowPrivilegeEscalation: false\n            seccompProfile:\n              type: RuntimeDefault\n          volumeMounts:\n            - name: custom-schema-files\n              mountPath: /schemas/\n            - name: custom-ldif-files\n              mountPath: /ldifs/\n          terminationMessagePolicy: File\n          envFrom:\n            - configMapRef:\n                name: openldap-env\n            - secretRef:\n                name: openldap\n      # If you have a custom pull secret and have staged the image somewhere\n#      imagePullSecrets:\n#        - name: <CUSTOM PULL SECRET>\n      #\n      volumes:\n        - name: custom-schema-files\n          configMap:\n            name: openldap-customschema\n            defaultMode: 420\n        - name: custom-ldif-files\n          configMap:\n            name: openldap-customldif\n            defaultMode: 420\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl apply -f openldap-deploy.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create a service for openldap"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"openldap-service.yaml"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"kind: Service\napiVersion: v1\nmetadata:\n  name: openldap\n  labels:\n    app: filenet-openldap\nspec:\n  ports:\n    - name: ldap-port\n      protocol: TCP\n      port: 389\n      targetPort: ldap-port\n  type: NodePort\n  selector:\n    app: filenet-openldap\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl apply -f openldap-service.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:"Verifying on the openldap pod"}),"\n",(0,s.jsx)(n.p,{children:"Retrieve the ldap pod name"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl get pods\nNAME                               READY   STATUS    RESTARTS   AGE\nopenldap-deploy-67888c7868-9ncrc   1/1     Running   0          5m15s\n"})}),"\n",(0,s.jsx)(n.p,{children:"Run an ldapsearch in the pod"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl exec -it openldap-deploy-67888c7868-9ncrc -- ldapsearch -x -b \"dc=filenet,dc=internal\" -H ldap://localhost:1389 -D 'cn=admin,dc=filenet,dc=internal' -w p@ssw0rd\n"})}),"\n",(0,s.jsx)(n.p,{children:"It should return a list of the users and groups configured in the config map."}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"If users are not being created in the ldap instance, you can verify the ldifs are valid with the following command in the ldap pod:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'ldapadd -x -D "cn=admin,dc=filenet,dc=internal" -w p@ssw0rd -H ldapi:/// -f /ldifs/01-default-users.ldif\n'})})]})]})}function r(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>i,a:()=>o});var s=a(7294);const l={},t=s.createContext(l);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);