"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9011],{5827:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=n(5893),a=n(1151);const r={id:"solution-deploy-postgres",sidebar_position:2,title:"Postgresql"},d=void 0,l={id:"Create/Deploy/solution-deploy-postgres",title:"Postgresql",description:"Deploy Postgres",source:"@site/docs/3-Create/Deploy/postgres.mdx",sourceDirName:"3-Create/Deploy",slug:"/Create/Deploy/solution-deploy-postgres",permalink:"/solution-filenet-aws/Create/Deploy/solution-deploy-postgres",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-client-engineering/solution-filenet-aws/tree/main/packages/create-docusaurus/templates/shared/docs/3-Create/Deploy/postgres.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"solution-deploy-postgres",sidebar_position:2,title:"Postgresql"},sidebar:"tutorialSidebar",previous:{title:"OpenLDAP",permalink:"/solution-filenet-aws/Create/Deploy/solution-deploy-openldap"},next:{title:"FNCM Operator",permalink:"/solution-filenet-aws/Create/Deploy/solution-deploy-operator"}},o={},c=[{value:"Deploy Postgres",id:"deploy-postgres",level:2},{value:"Creating configmaps",id:"creating-configmaps",level:3},{value:"Create PVCs",id:"create-pvcs",level:3},{value:"Create deployment",id:"create-deployment",level:3},{value:"Create the service",id:"create-the-service",level:3},{value:"Apply Yaml files to cluster",id:"apply-yaml-files-to-cluster",level:3},{value:"Prepare database table spaces and ceuser",id:"prepare-database-table-spaces-and-ceuser",level:3},{value:"Create the databases",id:"create-the-databases",level:3},{value:"IER Databases and Object Stores",id:"ier-databases-and-object-stores",level:2},{value:"Create the tablespace directories",id:"create-the-tablespace-directories",level:3},{value:"Create the IER object store databases",id:"create-the-ier-object-store-databases",level:3},{value:"Appendix",id:"appendix",level:2},{value:"Adding Other Object Store Databases",id:"adding-other-object-store-databases",level:3},{value:"Creating the tablespace directories in postgres pod",id:"creating-the-tablespace-directories-in-postgres-pod",level:4},{value:"Create the databases",id:"create-the-databases-1",level:4}];function i(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"deploy-postgres",children:"Deploy Postgres"}),"\n",(0,t.jsx)(s.h3,{id:"creating-configmaps",children:"Creating configmaps"}),"\n",(0,t.jsxs)(s.admonition,{type:"note",children:[(0,t.jsx)(s.p,{children:"The files we are creating below can be found combined here. This yaml is purely for reference as are the examples below and may need to be edited to suit your environment."}),(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{target:"_blank",href:n(322).Z+"",children:"postgres.yaml"})}),"\n"]})]}),"\n",(0,t.jsx)(s.p,{children:"Let's create a configmap for the PGSQL database to use:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",metastring:'title="postgres_configmap.yaml"',children:"kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: postgres-config\n  labels:\n    app: postgres\ndata:\n  POSTGRES_DB: defaultdb\n  POSTGRES_USER: admin\n  POSTGRES_PASSWORD: p@ssw0rd\n  PGDATA: /var/lib/postgresql/data/pgdata\n"})}),"\n",(0,t.jsx)(s.h3,{id:"create-pvcs",children:"Create PVCs"}),"\n",(0,t.jsx)(s.p,{children:"Now lets create a pair of ebs storage device PVCs for the database data and tablespaces."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",metastring:'title="postgres-pvc.yaml"',children:"kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: postgres-data\n  namespace: filenet\n  labels:\n    app: postgres\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 50Gi\n  storageClassName: ebs-gp3-sc\n  volumeMode: Filesystem\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: postgres-tablespaces\n  labels:\n    app: postgres\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi\n  storageClassName: ebs-gp3-sc\n  volumeMode: Filesystem\n"})}),"\n",(0,t.jsx)(s.h3,{id:"create-deployment",children:"Create deployment"}),"\n",(0,t.jsx)(s.p,{children:"Create a deployment for postgres. As per the IBM recommendations we are setting the following args for postgres to 500:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"max_prepared_transactions=500"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"max_connections=500"})}),"\n"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",metastring:'title="postgres-deploy.yaml"',children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres  # Sets Deployment name\n  namespace: filenet\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      securityContext:\n        runAsUser: 2000\n        runAsGroup: 2000\n        fsGroup: 65536\n      containers:\n        - name: postgres\n          args:\n            - '-c'\n            // highlight-start\n            - max_prepared_transactions=500\n            // highlight-end\n            - '-c'\n            // highlight-start\n            - max_connections=500\n            // highlight-end\n          image: postgres:latest # Sets Image\n          imagePullPolicy: \"IfNotPresent\"\n          ports:\n            - containerPort: 5432  # Exposes container port\n          envFrom:\n            - configMapRef:\n                name: postgres-config\n          volumeMounts:\n            - mountPath: /var/lib/postgresql/data\n              name: postgres-data\n            - mountPath: /pgsqldata\n              name: postgres-tablespaces\n      volumes:\n        - name: postgresdb\n          persistentVolumeClaim:\n            claimName: postgres-data\n        - name: postgres-tablespaces\n          persistentVolumeClaim:\n            claimName: postgres-tablespaces\n"})}),"\n",(0,t.jsx)(s.h3,{id:"create-the-service",children:"Create the service"}),"\n",(0,t.jsx)(s.p,{children:"Create the service for postgres"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",metastring:'title="postgres-service.yaml"',children:"kind: Service\napiVersion: v1\nmetadata:\n  name: postgres\n  labels:\n    app: postgres\nspec:\n  ports:\n    - name: pgsql-port\n      protocol: TCP\n      port: 5432\n      targetPort: 5432\n  type: NodePort\n  selector:\n    app: postgres\n\n"})}),"\n",(0,t.jsx)(s.h3,{id:"apply-yaml-files-to-cluster",children:"Apply Yaml files to cluster"}),"\n",(0,t.jsxs)(s.p,{children:["These yaml files are not set to any specific namespace, so make sure you've set your kubectl context accordingly to the namespace you want to deploy them in. As a default, we should have set our namespace context to ",(0,t.jsx)(s.code,{children:"filenet"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"Now apply the above yaml files to the cluster:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"kubectl apply -f postgres_configmap.yaml\nkubectl apply -f postgres-pvc.yaml\nkubectl apply -f postgres-deploy.yaml\nkubectl apply -f postgres-service.yaml\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Verify the postgres default database we configured above is up. You can get the pod name from ",(0,t.jsx)(s.code,{children:"kubectl get pods"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"kubectl exec -it postgres-POD-ID -- psql -h localhost -U admin --password -p 5432 defaultdb\n"})}),"\n",(0,t.jsx)(s.h3,{id:"prepare-database-table-spaces-and-ceuser",children:"Prepare database table spaces and ceuser"}),"\n",(0,t.jsx)(s.p,{children:"Retrieve the postgres pod id with this command:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"kubectl get pods | grep postgres\n\n// highlight-next-line\npostgres-759fd876ff-d5fxd                     1/1     Running   0          6d10h\n"})}),"\n",(0,t.jsx)(s.p,{children:"Connect to the postgres pod and create the tablespace directories for all databases you plan to create."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"kubectl exec -it postgres-759fd876ff-d5fxd -- mkdir /pgsqldata/osdb /pgsqldata/gcddb /pgsqldata/icndb\nkubectl exec -it postgres-759fd876ff-d5fxd -- chmod 700 /pgsqldata/osdb /pgsqldata/gcddb /pgsqldata/icndb\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Connect to ",(0,t.jsx)(s.code,{children:"defaultdb"}),". Our password will be ",(0,t.jsx)(s.code,{children:"p@ssw0rd"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"kubectl exec -it postgres-759fd876ff-d5fxd -- psql -h localhost -U admin --password -p 5432 defaultdb\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create the ",(0,t.jsx)(s.code,{children:"ceuser"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"create role ceuser login password 'p@ssw0rd';\n"})}),"\n",(0,t.jsx)(s.h3,{id:"create-the-databases",children:"Create the databases"}),"\n",(0,t.jsx)(s.p,{children:"For this deployment, we will be creating the following databases:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"gcddb"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"icndb"})}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Initial Object Store database"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"osdb"})}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["At this point you should still be connected to ",(0,t.jsx)(s.code,{children:"defaultdb"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Create the GCD database. When you run the ",(0,t.jsx)(s.code,{children:"\\connect"})," command, it will query you for the password. It will still be ",(0,t.jsx)(s.code,{children:"p@ssw0rd"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["With these commands, we will be creating a new database, setting the owner to ",(0,t.jsx)(s.code,{children:"ceuser"}),", locking it down from public and then creating the tablespace for that database to use the directories we created above. These tablespaces will live on a separate PVC."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"CREATE DATABASE gcddb OWNER ceuser TEMPLATE template0 ENCODING UTF8;\nGRANT ALL ON DATABASE gcddb TO ceuser;\nREVOKE CONNECT ON DATABASE gcddb FROM public;\n// highlight-next-line\n\\connect gcddb\nCREATE TABLESPACE gcddb_tbs OWNER ceuser LOCATION '/pgsqldata/gcddb';\nGRANT CREATE ON TABLESPACE gcddb_tbs TO ceuser;\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create the ICN database. When you run the ",(0,t.jsx)(s.code,{children:"\\connect"})," command, it will query you for the password. It will still be ",(0,t.jsx)(s.code,{children:"p@ssw0rd"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"CREATE DATABASE icndb OWNER ceuser TEMPLATE template0 ENCODING UTF8;\nGRANT ALL ON DATABASE icndb TO ceuser;\nREVOKE CONNECT ON DATABASE gcddb FROM public;\n// highlight-next-line\n\\connect icndb\nCREATE TABLESPACE icndb_tbs OWNER ceuser LOCATION '/pgsqldata/icndb';\nGRANT CREATE ON TABLESPACE icndb_tbs TO ceuser;\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create the Object Store database. When you run the ",(0,t.jsx)(s.code,{children:"\\connect"})," command, it will query you for the password. It will still be ",(0,t.jsx)(s.code,{children:"p@ssw0rd"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"CREATE DATABASE osdb OWNER ceuser TEMPLATE template0 ENCODING UTF8 ;\nGRANT ALL ON DATABASE osdb TO ceuser;\nREVOKE CONNECT ON DATABASE osdb FROM public;\n// highlight-next-line\n\\connect osdb\nCREATE TABLESPACE osdb_tbs OWNER ceuser LOCATION '/pgsqldata/osdb';\nGRANT CREATE ON TABLESPACE osdb_tbs TO ceuser;\n"})}),"\n",(0,t.jsx)(s.h2,{id:"ier-databases-and-object-stores",children:"IER Databases and Object Stores"}),"\n",(0,t.jsx)(s.p,{children:"For IER support, we will be creating the following databases:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"fposdb"})," - File Plan Object Store"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"rosdb"})," - Record Object Store"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["In this instance we will also be creating two extra table spaces for ",(0,t.jsx)(s.code,{children:"rosdb"})," for the indexarea and workflows."]}),"\n",(0,t.jsx)(s.h3,{id:"create-the-tablespace-directories",children:"Create the tablespace directories"}),"\n",(0,t.jsx)(s.p,{children:"Retrieve the postgres pod id with this command:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"kubectl get pods | grep postgres\n\n// highlight-next-line\npostgres-759fd876ff-d5fxd                     1/1     Running   0          6d10h\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Connect to the postgres pod and create the tablespace directories for ",(0,t.jsx)(s.code,{children:"fposdb"})," and ",(0,t.jsx)(s.code,{children:"rosdb"}),". This will also include the paths for the indexarea and workflows for ",(0,t.jsx)(s.code,{children:"rosdb"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"kubectl exec -it postgres-759fd876ff-d5fxd -- mkdir /pgsqldata/fposdb /pgsqldata/rosdb /pgsqldata/rosdbwf /pgsqldata/rosdbidx \nkubectl exec -it postgres-759fd876ff-d5fxd -- chmod 700 /pgsqldata/fposdb /pgsqldata/rosdb /pgsqldata/rosdbwf /pgsqldata/rosdbidx \n"})}),"\n",(0,t.jsx)(s.h3,{id:"create-the-ier-object-store-databases",children:"Create the IER object store databases"}),"\n",(0,t.jsxs)(s.p,{children:["Connect to ",(0,t.jsx)(s.code,{children:"defaultdb"}),". Our password will be ",(0,t.jsx)(s.code,{children:"p@ssw0rd"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"kubectl exec -it postgres-759fd876ff-d5fxd -- psql -h localhost -U admin --password -p 5432 defaultdb\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create the databases. Each ",(0,t.jsx)(s.code,{children:"\\connect"})," statement will require the ",(0,t.jsx)(s.code,{children:"p@ssw0rd"})," password."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"CREATE DATABASE fposdb OWNER ceuser TEMPLATE template0 ENCODING UTF8;\nGRANT ALL ON DATABASE fposdb TO ceuser;\nREVOKE CONNECT ON DATABASE fposdb FROM public;\n\n// highlight-next-line\n\\connect fposdb\nCREATE TABLESPACE fposdb_tbs OWNER ceuser LOCATION '/pgsqldata/fposdb';\nGRANT CREATE ON TABLESPACE fposdb_tbs TO ceuser;\n\nCREATE DATABASE rosdb OWNER ceuser TEMPLATE template0 ENCODING UTF8;\nGRANT ALL ON DATABASE rosdb TO ceuser;\nREVOKE CONNECT ON DATABASE rosdb FROM public;\n\n// highlight-next-line\n\\connect rosdb\nCREATE TABLESPACE rosdb_tbs OWNER ceuser LOCATION '/pgsqldata/rosdb';\nGRANT CREATE ON TABLESPACE rosdb_tbs TO ceuser;\n"})}),"\n",(0,t.jsxs)(s.p,{children:["We will also now create the tablespaces in ",(0,t.jsx)(s.code,{children:"rosdb"})," for the index area and workflows"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"// highlight-start\nCREATE TABLESPACE rosdbwf_tbs OWNER ceuser LOCATION '/pgsqldata/rosdbwf';\nCREATE TABLESPACE rosdbidx_tbs OWNER ceuser LOCATION '/pgsqldata/rosdbidx';\nGRANT CREATE ON TABLESPACE rosdbwf_tbs TO ceuser;\nGRANT CREATE ON TABLESPACE rosdbidx_tbs TO ceuser;\n// highlight-end\n\n"})}),"\n",(0,t.jsx)(s.h2,{id:"appendix",children:"Appendix"}),"\n",(0,t.jsx)(s.h3,{id:"adding-other-object-store-databases",children:"Adding Other Object Store Databases"}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsx)(s.p,{children:"This presumes you already have completed the above steps"})}),"\n",(0,t.jsx)(s.p,{children:"Determine how many databases we need to create. In our example below we will create the following:"}),"\n",(0,t.jsx)(s.p,{children:"Extra object stores"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"os2db"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"os3db"})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"creating-the-tablespace-directories-in-postgres-pod",children:"Creating the tablespace directories in postgres pod"}),"\n",(0,t.jsx)(s.p,{children:"Determine the name of your postgres pod by first making sure we're in the right namespace:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"kubectl config set-context --current --namespace=filenet\n"})}),"\n",(0,t.jsx)(s.p,{children:"And then pulling a list of pods"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"kubectl get pods | grep postgres\n// highlight-next-line\npostgres-759fd876ff-d5fxd                     1/1     Running   0          7d22h\n"})}),"\n",(0,t.jsx)(s.p,{children:"Now create the tablespace folders on the pod. These will be living in the PVC storage:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"kubectl exec -it postgres-759fd876ff-d5fxd -- mkdir /pgsqldata/os2db /pgsqldata/os3db\nkubectl exec -it postgres-759fd876ff-d5fxd -- chmod 700 /pgsqldata/os2db /pgsqldata/os3db\n"})}),"\n",(0,t.jsx)(s.h4,{id:"create-the-databases-1",children:"Create the databases"}),"\n",(0,t.jsxs)(s.p,{children:["Connect to ",(0,t.jsx)(s.code,{children:"defaultdb"}),". Our password will be ",(0,t.jsx)(s.code,{children:"p@ssw0rd"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"kubectl exec -it postgres-759fd876ff-d5fxd -- psql -h localhost -U admin --password -p 5432 defaultdb\n"})}),"\n",(0,t.jsx)(s.p,{children:"Now create the databases"}),"\n",(0,t.jsxs)(s.p,{children:["Create each database listed above. When you run the ",(0,t.jsx)(s.code,{children:"\\connect"})," command, it will query you for the password. It will still be ",(0,t.jsx)(s.code,{children:"p@ssw0rd"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["With these commands, we will be creating each database, setting the owner to ",(0,t.jsx)(s.code,{children:"ceuser"}),", locking it down from public and then creating the tablespace for that database to use the directories we created above. These tablespaces will live on a separate PVC."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"CREATE DATABASE os2db OWNER ceuser TEMPLATE template0 ENCODING UTF8;\nGRANT ALL ON DATABASE os2db TO ceuser;\nREVOKE CONNECT ON DATABASE os2db FROM public;\n\n// highlight-next-line\n\\connect os2db\nCREATE TABLESPACE os2db_tbs OWNER ceuser LOCATION '/pgsqldata/os2db';\nGRANT CREATE ON TABLESPACE os2db_tbs TO ceuser;\n\nCREATE DATABASE os3db OWNER ceuser TEMPLATE template0 ENCODING UTF8;\nGRANT ALL ON DATABASE os3db TO ceuser;\nREVOKE CONNECT ON DATABASE os3db FROM public;\n\n// highlight-next-line\n\\connect os3db\nCREATE TABLESPACE os3db_tbs OWNER ceuser LOCATION '/pgsqldata/os3db';\nGRANT CREATE ON TABLESPACE os3db_tbs TO ceuser;\n"})})]})}function p(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}},322:(e,s,n)=>{n.d(s,{Z:()=>t});const t=n.p+"assets/files/postgres-a2964a3654643e140327c6980db7d02a.yaml"},1151:(e,s,n)=>{n.d(s,{Z:()=>l,a:()=>d});var t=n(7294);const a={},r=t.createContext(a);function d(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);