"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9011],{5827:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>i,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var t=n(5893),a=n(1151);const r={id:"solution-deploy-postgres",sidebar_position:2,title:"Postgres"},o="Deploy Postgres",l={id:"Create/Deploy/solution-deploy-postgres",title:"Postgres",description:"Let's create a configmap for the PGSQL database to use:",source:"@site/docs/3-Create/Deploy/postgres.mdx",sourceDirName:"3-Create/Deploy",slug:"/Create/Deploy/solution-deploy-postgres",permalink:"/Create/Deploy/solution-deploy-postgres",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-client-engineering/solution-filenet-aws/tree/main/packages/create-docusaurus/templates/shared/docs/3-Create/Deploy/postgres.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"solution-deploy-postgres",sidebar_position:2,title:"Postgres"},sidebar:"tutorialSidebar",previous:{title:"OpenLDAP",permalink:"/Create/Deploy/solution-deploy-openldap"},next:{title:"FileNet Operator",permalink:"/Create/Deploy/solution-deploy-operator"}},c={},d=[{value:"Create databases",id:"create-databases",level:3}];function p(e){const s={code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"deploy-postgres",children:"Deploy Postgres"}),"\n",(0,t.jsx)(s.p,{children:"Let's create a configmap for the PGSQL database to use:"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.code,{children:"postgres_configmap.yaml"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",children:"kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: postgres-config\n  labels:\n    app: postgres\ndata:\n  POSTGRES_DB: defaultdb\n  POSTGRES_USER: admin\n  POSTGRES_PASSWORD: p@ssw0rd\n  PGDATA: /var/lib/postgresql/data/pgdata\n"})}),"\n",(0,t.jsx)(s.p,{children:"Now lets create a pair of ebs storage device PVCs for the database data and tablespaces."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.code,{children:"postgres-pvc.yaml"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",children:"kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: postgres-data\n  namespace: filenet\n  labels:\n    app: postgres\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 50Gi\n  storageClassName: ebs-gp3-sc\n  volumeMode: Filesystem\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: postgres-tablespaces\n  labels:\n    app: postgres\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi\n  storageClassName: ebs-gp3-sc\n  volumeMode: Filesystem\n"})}),"\n",(0,t.jsx)(s.p,{children:"Create a deployment for postgres. As per the IBM recommendations we are setting the following args for postgres to 500:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"max_prepared_transactions=500"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"max_connections=500"})}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.code,{children:"postgres-deploy.yaml"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres  # Sets Deployment name\n  namespace: filenet\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      securityContext:\n        runAsUser: 2000\n        runAsGroup: 2000\n        fsGroup: 65536\n      containers:\n        - name: postgres\n          args:\n            - '-c'\n            - max_prepared_transactions=500\n            - '-c'\n            - max_connections=500\n          image: postgres:latest # Sets Image\n          imagePullPolicy: \"IfNotPresent\"\n          ports:\n            - containerPort: 5432  # Exposes container port\n          envFrom:\n            - configMapRef:\n                name: postgres-config\n          volumeMounts:\n            - mountPath: /var/lib/postgresql/data\n              name: postgredb\n            - mountPath: /pgsqldata\n              name: postgres-tablespaces\n      volumes:\n        - name: postgresdb\n          persistentVolumeClaim:\n            claimName: postgres-data\n        - name: postgres-tablespaces\n          persistentVolumeClaim:\n            claimName: postgres-tablespaces\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create the service for postgres\n",(0,t.jsx)(s.code,{children:"postgres-service.yaml"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",children:"kind: Service\napiVersion: v1\nmetadata:\n  name: postgres\n  labels:\n    app: postgres\nspec:\n  ports:\n    - name: pgsql-port\n      protocol: TCP\n      port: 5432\n      targetPort: 5432\n  type: NodePort\n  selector:\n    app: postgres\n\n"})}),"\n",(0,t.jsxs)(s.p,{children:["These yaml files are not set to any specific namespace, so make sure you've set your kubectl context accordingly to the namespace you want to deploy them in. As a default, we should have set our namespace context to ",(0,t.jsx)(s.code,{children:"filenet"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"Now apply the above yaml files to the cluster:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"kubectl apply -f postgres_configmap.yaml\nkubectl apply -f postgres-pvc.yaml\nkubectl apply -f postgres-deploy.yaml\nkubectl apply -f postgres-service.yaml\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Verify the postgres default database we configured above is up. You can get the pod name from ",(0,t.jsx)(s.code,{children:"kubectl get pods"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"kubectl exec -it postgres-POD-ID -- psql -h localhost -U admin --password -p 5432 defaultdb\n"})}),"\n",(0,t.jsx)(s.h3,{id:"create-databases",children:"Create databases"}),"\n",(0,t.jsx)(s.p,{children:"Connect to the postgres pod"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"kubectl exec -it postgres-POD-ID -- bash\n"})}),"\n",(0,t.jsx)(s.p,{children:"Create the tablespace directories"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"mkdir /pgsqldata/osdb /pgsqldata/gcddb /pgsqldata/icndb\n\nchmod 700 /pgsqldata/osdb /pgsqldata/gcddb /pgsqldata/icndb\n\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Connect to the default db. Our password will be ",(0,t.jsx)(s.code,{children:"p@ssw0rd"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"psql -h localhost -U admin --password -p 5432 defaultdb\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create the ",(0,t.jsx)(s.code,{children:"ceuser"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"create role ceuser login password 'p@ssw0rd';\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create the GCD database. When you run the ",(0,t.jsx)(s.code,{children:"\\connect"})," command, it will query you for the password. It will still be ",(0,t.jsx)(s.code,{children:"p@ssw0rd"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"CREATE DATABASE gcddb OWNER ceuser TEMPLATE template0 ENCODING UTF8;\nGRANT ALL ON DATABASE gcddb TO ceuser;\nREVOKE CONNECT ON DATABASE gcddb FROM public;\n\\connect gcddb\nCREATE TABLESPACE gcddb_tbs OWNER ceuser LOCATION '/pgsqldata/gcddb';\nGRANT CREATE ON TABLESPACE gcddb_tbs TO ceuser;\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create the Object Store database. When you run the ",(0,t.jsx)(s.code,{children:"\\connect"})," command, it will query you for the password. It will still be ",(0,t.jsx)(s.code,{children:"p@ssw0rd"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"CREATE DATABASE osdb OWNER ceuser TEMPLATE template0 ENCODING UTF8 ;\nGRANT ALL ON DATABASE osdb TO ceuser;\nREVOKE CONNECT ON DATABASE osdb FROM public;\n\\connect osdb\nCREATE TABLESPACE osdb_tbs OWNER ceuser LOCATION '/pgsqldata/osdb';\nGRANT CREATE ON TABLESPACE osdb_tbs TO ceuser;\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create the ICN database. When you run the ",(0,t.jsx)(s.code,{children:"\\connect"})," command, it will query you for the password. It will still be ",(0,t.jsx)(s.code,{children:"p@ssw0rd"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"CREATE DATABASE icndb OWNER ceuser TEMPLATE template0 ENCODING UTF8;\nGRANT ALL ON DATABASE icndb TO ceuser;\nREVOKE CONNECT ON DATABASE gcddb FROM public;\n\\connect icndb\nCREATE TABLESPACE icndb_tbs OWNER ceuser LOCATION '/pgsqldata/icndb';\nGRANT CREATE ON TABLESPACE icndb_tbs TO ceuser;\n"})})]})}function i(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>l,a:()=>o});var t=n(7294);const a={},r=t.createContext(a);function o(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);