"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4173],{6408:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=t(5893),r=t(1151);const i={id:"solution-stage-rds",sidebar_position:5,title:"AWS RDS for Postgres"},o=void 0,a={id:"Prepare/Stage/solution-stage-rds",title:"AWS RDS for Postgres",description:"Configuring Postgres RDS/DB on AWS (Optional)",source:"@site/docs/2-Prepare/Stage/RDS.mdx",sourceDirName:"2-Prepare/Stage",slug:"/Prepare/Stage/solution-stage-rds",permalink:"/solution-filenet-aws/Prepare/Stage/solution-stage-rds",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-client-engineering/solution-filenet-aws/tree/main/packages/create-docusaurus/templates/shared/docs/2-Prepare/Stage/RDS.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"solution-stage-rds",sidebar_position:5,title:"AWS RDS for Postgres"},sidebar:"tutorialSidebar",previous:{title:"EKS Cluster",permalink:"/solution-filenet-aws/Prepare/Stage/solution-stage-eks"},next:{title:"Organize",permalink:"/solution-filenet-aws/Prepare/organize"}},c={},d=[{value:"Configuring Postgres RDS/DB on AWS (Optional)",id:"configuring-postgres-rdsdb-on-aws-optional",level:2}];function u(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"configuring-postgres-rdsdb-on-aws-optional",children:"Configuring Postgres RDS/DB on AWS (Optional)"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Follow these instructions if you will be utilizing AWS RDS to host your Postgresql instance instead of deploying to the cluster locally."})}),"\n",(0,s.jsx)(n.p,{children:"Create a security group. We're going to get our vpc for our filenet cluster first and use that here since we don't have any default vpc."}),"\n",(0,s.jsx)(n.p,{children:"Let's export the following env vars"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"export clustername=filenet-cluster-east\nexport region=us-east-1\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now let's retrieve our vpc id"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'vpc_id=$(aws eks describe-cluster \\\n    --name $clustername \\\n    --query "cluster.resourcesVpcConfig.vpcId" \\\n    --region $region \\\n    --output text)\n'})}),"\n",(0,s.jsx)(n.p,{children:"And with those vars set, let's now create our security group"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'security_group_id=$(aws ec2 create-security-group \\\n    --group-name RDSFilenetSecGroup \\\n    --description "RDS Access to Filenet Cluster" \\\n    --vpc-id $vpc_id \\\n    --region $region \\\n    --output text)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Retrieve the CIDR range for your cluster's VPC and store it in a variable for use in a later step."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'cidr_range=$(aws ec2 describe-vpcs \\\n    --vpc-ids $vpc_id \\\n    --query "Vpcs[].CidrBlock" \\\n    --output text \\\n    --region $region)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Let's authorize access to that group for Oracle which uses port 1521"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"aws ec2 authorize-security-group-ingress \\\n    --group-id $security_group_id \\\n    --protocol tcp \\\n    --port 1521 \\\n    --region $region \\\n    --cidr $cidr_range\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's create a db subnet group. First get our existing subnet ids from our vpc"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"aws ec2 describe-subnets \\\n    --filters \"Name=vpc-id,Values=$vpc_id\" \\\n    --query 'Subnets[*].{SubnetId: SubnetId,AvailabilityZone: AvailabilityZone,CidrBlock: CidrBlock}' \\\n    --region $region \\\n    --output table\n\n----------------------------------------------------------------------\n|                           DescribeSubnets                          |\n+------------------+--------------------+----------------------------+\n| AvailabilityZone |     CidrBlock      |         SubnetId           |\n+------------------+--------------------+----------------------------+\n|  us-east-1a      |  192.168.0.0/19    |  subnet-08ddff738c8fac2db  |\n|  us-east-1b      |  192.168.32.0/19   |  subnet-0e11acfc0a427d52d  |\n|  us-east-1b      |  192.168.128.0/19  |  subnet-0dd9067f0f828e49c  |\n|  us-east-1c      |  192.168.160.0/19  |  subnet-0da98130d8b80f210  |\n|  us-east-1a      |  192.168.96.0/19   |  subnet-02b159221adb9b790  |\n|  us-east-1c      |  192.168.64.0/19   |  subnet-01987475cac20b583  |\n+------------------+--------------------+----------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now let's create our db subnet group"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'aws rds create-db-subnet-group \\\n--db-subnet-group-name "filenet-rds-subnet-group" \\\n--db-subnet-group-description "This is our cluster subnet ids authorized and grouped for RDS" \\\n--subnet-ids "subnet-08ddff738c8fac2db" "subnet-0e11acfc0a427d52d" "subnet-0dd9067f0f828e49c" "subnet-0da98130d8b80f210" "subnet-02b159221adb9b790" "subnet-01987475cac20b583"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now with all those prerequisites completed, let's create the RDS instance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"aws rds create-db-instance \\\n    --engine postgresql \\\n    --db-instance-identifier filenet-east-db \\\n    --allocated-storage 300 \\\n    --multi-az \\\n    --db-subnet-group-name filenet-rds-subnet-group \\\n    --db-instance-class db.t3.large \\\n    --vpc-security-group-ids $security_group_id \\\n    --master-username filenetuser \\\n    --master-user-password filenetpass \\\n    --backup-retention-period 3\n"})}),"\n",(0,s.jsxs)(n.p,{children:["A default DB called ",(0,s.jsx)(n.code,{children:"postgres"})," will be created"]})]})}function l(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var s=t(7294);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);